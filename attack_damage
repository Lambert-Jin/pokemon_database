#! /usr/bin/env python3


"""
COMP3311
23T1
Assignment 2
Pokemon Database

Written by: <YOUR NAME HERE> <YOUR STUDENT ID HERE>
Written on: <DATE HERE>

Attack Damage

Given the name of an attacking, and a defending pokemon along with the name of a game in the Pokemon series,
display a list, ordered from lowest to highest damage,
of all the moves the attacking pokemon could use on the defending pokemon in the given game.
"""


import sys
import psycopg2
import helpers


### Constants
USAGE = f"Usage: {sys.argv[0]} <Attacking Pokemon Name> <Defending Pokemon Name> <Pokemon Game Name>"


### Globals
db = None
Attacking_Pokemon_Name = None
Defending_Pokemon_Name = None
Pokemon_Game_Name      = None


### Command-line args
if len(sys.argv) != 4:
    print(USAGE, file=sys.stderr)
    sys.exit(1)
Attacking_Pokemon_Name = helpers.clean(sys.argv[1])
Defending_Pokemon_Name = helpers.clean(sys.argv[2])
Pokemon_Game_Name      = helpers.clean(sys.argv[3])

# error in datatype
def calculate_damage(level, move_power, attacker_attack, defender_defense, random_factor, stab, type_effectiveness):
    damage = ((((((2 * level) / 5) + 2) * move_power * (float(attacker_attack) / float(defender_defense))) / 50) + 2) * random_factor * stab * type_effectiveness
    return int(round(damage, 1))


    


def main():
    cur = db.cursor()
    
    cur.execute("SELECT Name, First_Type, Second_Type, Base_Stats FROM Pokemon WHERE Name = %s", (Attacking_Pokemon_Name,))
    attacking_pokemon = cur.fetchone()
    if not attacking_pokemon:
        print(f"'{Attacking_Pokemon_Name}' isn't a Pokemon that exists.", file=sys.stderr)
        return
    
    attacking_pokemon  = list(attacking_pokemon)
    attacking_pokemon[3] = attacking_pokemon[3].strip("()")
    attacking_pokemon[3] = attacking_pokemon[3].split(',')
    attacking_pokemon  = tuple(attacking_pokemon)


    cur.execute("SELECT Name, First_Type, Second_Type, Base_Stats FROM Pokemon WHERE Name = %s", (Defending_Pokemon_Name,))
    defending_pokemon = cur.fetchone()
    if not defending_pokemon:
        print(f"'{Defending_Pokemon_Name}' isn't a Pokemon that exists.",file=sys.stderr)
        return
    
    defending_pokemon = list(defending_pokemon)
    defending_pokemon[3] = defending_pokemon[3].strip("()")
    defending_pokemon[3] = defending_pokemon[3].split(',')
    defending_pokemon = tuple(defending_pokemon)

    cur.execute("SELECT id FROM Games WHERE Name = %s", (Pokemon_Game_Name ,))
    game_result = cur.fetchall()
    if not game_result:
        print(f"'Pokemon {Pokemon_Game_Name}' isn't a game in the Pokemon series.",file=sys.stderr)
        return
    
    query = """
    select p.id
    from pokemon p
    join pokedex pd on pd.national_id = p.id
    join games g on g.id = pd.game
    where p.name = %s and g.name = %s
    """
    cur.execute(query, (Attacking_Pokemon_Name, Pokemon_Game_Name))
    result = cur.fetchone()
    if not result:
        print(f"'{Attacking_Pokemon_Name}' doesn't appear in 'Pokemon {Pokemon_Game_Name}'.", file = sys.stderr)
        return
    
    cur.execute(query, (Defending_Pokemon_Name, Pokemon_Game_Name))
    result = cur.fetchone()
    if not result:
        print(f"'{Defending_Pokemon_Name}' doesn't appear in 'Pokemon {Pokemon_Game_Name}'.", file = sys.stderr)
        return


    moves_query = """
    SELECT distinct m.ID, m.Name, m.POWER, m.Of_Type, m.Category
    FROM Moves m
    INNER JOIN Learnable_Moves lm ON m.ID = lm.Learns
    JOIN Pokemon p ON LM.Learnt_By = p.id
    JOIN Games g on LM.Learnt_In = g.id
    WHERE p.name = %s AND g.name = %s
    """
    cur.execute(moves_query, (attacking_pokemon[0], Pokemon_Game_Name))
    moves = cur.fetchall()

    cur.execute("SELECT Attacking, Defending, Multiplier FROM Type_Effectiveness")
    type_effectiveness_data = cur.fetchall()

    type_effectiveness = {}
    for attacking, defending, multiplier in type_effectiveness_data:
        type_effectiveness.setdefault(attacking, {})[defending] = multiplier / 100

    results = []
    for move_id, move_name, move_power, move_type, move_category in moves:
        if move_power is None:
            continue

        stab = 1.5 if move_type in (attacking_pokemon[1], attacking_pokemon[2]) else 1.0
        type_effectiveness_multiplier = type_effectiveness.get(move_type, {}).get(defending_pokemon[1], 1.0) * type_effectiveness.get(move_type, {}).get(defending_pokemon[2], 1.0)

        if move_category in ('Physical', 'Special'):
            attacker_attack = attacking_pokemon[3][1] if move_category == 'Physical' else attacking_pokemon[3][3]
            defender_defense = defending_pokemon[3][2] if move_category == 'Physical' else defending_pokemon[3][4]
        else:
            continue

        min_damage = calculate_damage(1, move_power, attacker_attack, defender_defense, 0.85, stab, type_effectiveness_multiplier)
        max_damage = calculate_damage(100, move_power, attacker_attack, defender_defense, 1.00, stab, type_effectiveness_multiplier)

        if max_damage == 0:
            continue

        results.append((move_name, min_damage, max_damage))

    def sort_key(item):
        return item[2], item[1], item[0]
    
    results.sort(key=sort_key)
    if not results:
        print(f"\nIn 'Pokemon {Pokemon_Game_Name}', '{Attacking_Pokemon_Name}' can't attack '{Defending_Pokemon_Name}'.")
        return

    print(f"In 'Pokemon {Pokemon_Game_Name}', When '{Attacking_Pokemon_Name}' attacks '{Defending_Pokemon_Name}', '{Attacking_Pokemon_Name}' can use the following moves:\n")
    
    for move_name, min_damage, max_damage in results:
        print(f"\t'{move_name:}' {' ' * (12 - len(move_name))} for a minimum of{min_damage:>3} damage and a maximum of {max_damage:>3} damage to '{Defending_Pokemon_Name}'.")

if __name__ == '__main__':
    try:
        db = psycopg2.connect(dbname="ass2")
        main()
    except psycopg2.Error as err:
        print("DB error: ", err)
    except Exception as err:
        print("Internal Error: ", err)
        raise err
    finally:
        if db is not None:
            db.close()
    sys.exit(0)
