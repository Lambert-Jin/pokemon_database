#! /usr/bin/env python3


"""
COMP3311
23T1
Assignment 2
Pokemon Database

Written by: <YOUR NAME HERE> <YOUR STUDENT ID HERE>
Written on: <DATE HERE>

Encounter Summary

Print a summary of all the Pokemon that can be encountered at a given location in a given game
"""


import sys
import psycopg2
from typing import Dict, List, Tuple
import helpers



### Constants
USAGE = f"Usage: {sys.argv[0]} <Location> <Game>"


### Globals
db = None
Location = None
Game = None


### Command-line args
if len(sys.argv) != 3:
    print(USAGE, file=sys.stderr)
    sys.exit(1)
Location = helpers.clean(sys.argv[1])
Game     = helpers.clean(sys.argv[2])



def encounter_summary(location: str, game: str) -> List[Tuple]:
    cur = db.cursor()
    create_or_replace_ability_view = """
    CREATE OR REPLACE VIEW ability_group
    AS
    select p.name as name, array_agg(a.name order by a.name ASC) as ability
	from pokemon p 
	LEFT JOIN Knowable_Abilities KA ON P.ID = KA.Known_By AND KA.Hidden = false
	LEFT JOIN Abilities A ON KA.Knows = A.ID
	group by p.name
    """
    cur.execute(create_or_replace_ability_view)

    create_or_replace_egg_view = """
    CREATE OR REPLACE VIEW new_egg_group
    AS
    select p.name as name, array_agg(EG.NAME order by EG.NAME ASC) as egg
    from pokemon p
    LEFT JOIN In_Group IG ON P.ID = IG.Pokemon
    LEFT JOIN Egg_Groups EG ON IG.Egg_Group = EG.ID
    group by p.name
    """
    cur.execute(create_or_replace_egg_view)

    query = """
    SELECT P.Name, T1.Name, T2.Name, E.Rarity, (E.Levels).Min, (E.Levels).Max, ag.ability, N.egg,
           string_agg(
               CASE
                   WHEN ER.Inverted THEN 'NOT ' || R.Assertion
                   ELSE R.Assertion
               END, ', '
               order by ER.Inverted
           ) AS requirements
    FROM Encounters E
    JOIN Pokemon P ON E.Occurs_With = P.ID
    JOIN Types T1 ON P.First_Type = T1.ID
    LEFT JOIN Types T2 ON P.Second_Type = T2.ID
    JOIN Locations L ON E.Occurs_At = L.ID
    JOIN Games G ON L.Appears_In = G.ID
    LEFT JOIN ability_group ag ON ag.name = P.name
    LEFT JOIN new_egg_group N ON N.name = P.name
    LEFT JOIN Encounter_Requirements ER ON E.ID = ER.Encounter
    LEFT JOIN Requirements R ON ER.Requirement = R.ID
    WHERE L.Name = %s AND G.Name = %s
    group by p.name, T1.Name, T2.Name, E.Rarity, (E.Levels).Min, (E.Levels).Max, ag.ability, N.egg
    ORDER BY E.Rarity DESC, P.Name ASC, (E.Levels).max ASC, requirements ASC
    """
    
    cur.execute(query, (location, game))
    return cur.fetchall()



def check_location_and_game(location: str, game: str) -> Tuple[bool, bool]:
    location_query = """
    SELECT COUNT(*) FROM Locations L
    JOIN Games G ON L.Appears_In = G.ID
    WHERE L.Name = %s AND G.Name = %s
    """

    game_query = """
    SELECT COUNT(*) FROM Games
    WHERE Name = %s
    """

    cur = db.cursor()
    cur.execute(location_query, (location, game))
    location_exists = cur.fetchone()[0] > 0

    cur.execute(game_query, (game,))
    game_exists = cur.fetchone()[0] > 0

    return location_exists, game_exists

def main():

    location_and_game_query = """
    SELECT L.name FROM Locations L
    JOIN Games G ON L.Appears_In = G.ID
    WHERE L.name = %s AND G.name = %s
    """

    game_query = """
    SELECT Name FROM Games
    WHERE Name = %s
    """

    location_query = """
    select L.name from Locations L
    where name = %s
    """

    cur = db.cursor()
    cur.execute(location_and_game_query, (Location, Game))
    location_and_game_exists = len(cur.fetchall()) > 0
    cur.execute(game_query, (Game,))
    game_exists = len(cur.fetchall()) > 0
    cur.execute(location_query, (Location,))
    location_exists = len(cur.fetchall()) > 0



    if not game_exists:
        sys.stderr.write(f"'Pokemon {Game}' isn't a game in the Pokemon series.\n")
        return
    elif not location_exists:
        sys.stderr.write(f"'{Location}' isn't a location in the Pokemon series.\n")
        return
    if not location_and_game_exists:
        sys.stderr.write(f"'{Location}' isn't in 'Pokemon {Game}'.\n")
        return

    rows = encounter_summary(Location, Game) 

    print(f"In 'Pokemon {Game}' at '{Location}' the following Pokemon can be Encountered:\n")

    def print_pokemon_info():
        print(f"\t{pokemon}:")
        print(f"\t\tType: {type1}/{type2}" if type2 else f"\t\tType: {type1}")
        print(f"\t\tRarity: {rarity}%")
        print(f"\t\tLevels: min {min_level}, max {max_level}")
        print(f"\t\tEgg Groups: {egg[0]}, {egg[1]}" if len(egg) == 2 else f"\t\tEgg Groups: {egg[0]}")
        print(f"\t\tAbilities: {ability[0]}, {ability[1]}" if len(ability) == 2 else f"\t\tAbilities: {ability[0]}")
        print(f"\t\tEncounter Requirements:")
        for item in sorted(req):
            print(f"\t\t\t{item}")
        print()


    for row in rows:
        pokemon, type1, type2, rarity, min_level, max_level, ability, egg, req = row
        req = req.split(', ')
        print_pokemon_info()

if __name__ == '__main__':
    try:
        db = psycopg2.connect(dbname="ass2")
        main()
    except psycopg2.Error as err:
        print("DB error: ", err)
    except Exception as err:
        print("Internal Error: ", err)
        raise err
    finally:
        if db is not None:
            db.close()
    sys.exit(0)
